[basics]
- use actual storage, specifically mongodb
    x remember a data field is needed to count correct/incorrect
    - pick a schema, run by one friend. probably option 1.
    - implement with mongoose: http://www.10gen.com/presentation/mongosf2011/nodejs
      - typical actions taken (stored procedures-ish?): virtuals
        - Schema.virtual, see: get() and set()
      - do nested documents have any negative impact? if not:
        - use nested document for: score: { right: 0, wrong: 0 };
      - index on "stack-name"
          - index: true option to a given proper
          - compound index: directly on schema, schema.index({field1: 1, field2: 1});
      - may play with pre/post method of schema, eg.: for 'save', 'delete'
      - try to play with chained "named scopes" (see video: 30:00 )
- convert all icons to monotone-black only (eg.: raphaeljs free icons)
  - sprite all icons together
- put "fork me" at top-right of index page; github-inspired
  - link this to code.jzacsh.com; use custom icon
- restructure/plan APIs
    spoke with djen;
    keep original paths and add in /edit/ new/ appendixes to each path-type.
    - HTTP POST/DELETE instead of redundant /[url]/[path]/
    - make sure solution exists for:
    (note: ":re: /other-url/" means a URL is redirected to from /other-url/)
        x /
            x Simple app intro; teaser at top: list available stacks of flash cards.
        - /export/xml
            x :re: /export/
            - Provide XML export of all stacks and their data
        - /export/json
            - Provide JSON export of all stacks and their data
        - /stack/new
            x :re: /stack/
            - Create a new stack of flash cards.
              - see form developement with formidable:
                https://github.com/felixge/node-formidable
        - /stack/[name]
            - Show contents of a stack, named [name]
        - /stack/[name]/export/xml
            x :re: /stack/[name]/export
            - Provide XML export of [name] stack and its data
        - /stack/[name]/export/json
            - Provide JSON export of [name] stack and its data
        - /stack/[name]/edit
            - Edit (re-order, show edit-links to) flash cards in stack [name].
        - /stack/[name]/study
            - Review cards with study algorithms to teach you and keep track
              of what you do/don't seem to know.
        - /stack/[name]/card/new
            x :re: /stack/[name]/card
            - Create a new flash card on the stack [name].
        - /stack/[name]/card/[id]
            - Show contents of flash card number [id] in stack [name].
        - /stack/[name]/card/[id]/edit
            - Edit contents of flash card number [id] in stack [name].

- port css to sass, from less
- port templating to haml, from jade
- see what can take from middleware screencast
  ( http://www.screenr.com/elL )
- add new algorithm; api: /stack/:name/{next,previous}
    - educational algorithm to help you learn what you're having trouble with.

[advanced]
- before putting this live somewhere, harden:
  - mongoddb
    - http://serverfault.com/questions/237762/how-to-make-a-secure-mongodb-server
    - http://www.mongodb.org/display/DOCS/Security+and+Authentication
  - node.js (look this up
- consider jquery-mobile lib to handle transition between cards and loading of
  their URLs
- utilize html5 LocalStorage APIs
    - allow offline use of entire dataset
    - allow offline editing; re-syncing on re-connection
- modify schema and add functionality for a picture on one size of flash card

[final]
- get a designer to come up with something beatufiul
    - make getting "correct" something visually pleasing (eg.: GREEN colors)
    - '' "incorrect" '' (eg.: RED colors)
- implement designer's specs

###############################################################################

x fix implementation of partials
    x figure out why partials take over the final output, eg.: /stack/:name

