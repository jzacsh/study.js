[basics]
- restructure/plan APIs
    spoke with djen;
    keep original paths and add in /edit/ new/ appendixes to each path-type.
    - HTTP POST/DELETE instead of redundant /[url]/[path]/
    - make sure solution exists for:
    (note: ":re: /other-url/" means a URL is redirected to from /other-url/)
        - /
            - Simple to app (teaser-top). List all available stacks of flash cards.
        - /stack/new
            x :re: /stack/
            - Create a new stack of flash cards.
        - /stack/[name]
            - Show contents of a stack, named [name]
        - /stack/[name]/edit
            - Edit (re-order, show edit-links to) flash cards in stack [name].
        - /stack/[name]/study
            - Review cards with study algorithms to teach you and keep track
              of what you do/don't seem to know.
        - /stack/[name]/card/new
            - :re: /stack/[name]/card
            - Create a new flash card on the stack [name].
        - /stack/[name]/card/[id]
            - Show contents of flash card number [id] in stack [name].
        - /stack/[name]/card/[id]/edit
            - Edit contents of flash card number [id] in stack [name].

- use actual storage, specifically mongodb
    - remember a data field is needed to count correct/incorrect
    - perhaps revamp api based on new simplicities, eg.:
        - card-ids are embedded in doc
        - put vs get allows api routes that accept tons of params, no need
          for form specific routes.
- form APIs with node.js
- see what can take from middleware screencast
  ( http://www.screenr.com/elL )
- add new algorithm; api: /stack/:name/{next,previous}
    - educational algorithm to help you learn what you're having trouble with.

[advanced]
- consider jquery-mobile lib to handle transition between cards and loading of
  their URLs
- utilize html5 LocalStorage APIs
    - allow offline use of entire dataset
    - allow offline editing; re-syncing on re-connection

[final]
- get a designer to come up with something beatufiul
    - make getting "correct" something visually pleasing (eg.: GREEN colors)
    - '' "incorrect" '' (eg.: RED colors)
- implement designer's specs

###############################################################################

x fix implementation of partials
    x figure out why partials take over the final output, eg.: /stack/:name

